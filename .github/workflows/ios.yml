name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
         xcode-version: latest-stable

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles 

      - name: Install Bundler
        run: gem install bundler

      - name: Swift Packages Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            Build/SourcePackages
            Build/Build/Products
          key: ${{ runner.os }}-deps-v1-${{ hashFiles('BILDsolid.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: ${{ runner.os }}-deps-v1-

      - name: Delete Package.resolved
        run: rm -f Rick_and_Morty.xcworkspace/xcshareddata/swiftpm/Package.resolved

      - name: Clean project
        run: xcodebuild clean -workspace Rick_and_Morty.xcworkspace -scheme Rick_and_Morty -configuration Debug

      - name: Resolve Swift packages
        run: xcodebuild -resolvePackageDependencies -workspace Rick_and_Morty.xcworkspace -scheme Rick_and_Morty

      - name: Build project
        run: |
          xcodebuild build \
            -workspace Rick_and_Morty.xcworkspace \
            -scheme Rick_and_Morty \
            -configuration Debug \
            -destination 'generic/platform=iOS'
      
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      # - name: Run unit tests
      #   run: >-
      #     xcodebuild test -workspace Rick_and_Morty.xcworkspace -scheme Rick_and_Morty -destination 'platform=iOS Simulator,name=iPhone SE (2nd generation),OS=15.2'
        # |
        #   xcodebuild test-without-building \
        #     -workspace Rick_and_Morty.xcworkspace \
        #     -scheme Rick_and_Morty \
        #     -only-testing:Rick_and_MortyTests \
        #     -skip-testing:Rick_and_MortyUITests \
        #     -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \
        #     CODE_SIGNING_ALLOWED=NO
